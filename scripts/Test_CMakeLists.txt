# Small Cmake script to test for the support of the new c++11 standard
# and the existence of the new standard template library libc++

# The script is working with cmake 2.6.4 and 2.8.10,
# so it should work also with all versions in between 
CMake_Minimum_Required(VERSION 2.6 FATAL_ERROR)

Project(TestEnvironment C CXX Fortran)

# Check if all needed compileres are installed
If(CMAKE_CXX_COMPILER AND CMAKE_C_COMPILER AND CMAKE_Fortran_COMPILER)
  Message(STATUS "Found all necessary compilers.")
  Set(ALL_COMPILER_FOUND TRUE)
  get_filename_component(_FC ${CMAKE_Fortran_COMPILER} NAME)
EndIf()

#Check for X11 which is mandatory for building ROOT

find_package(X11 REQUIRED)

If (X11_FOUND AND X11_Xpm_FOUND AND X11_Xft_FOUND AND X11_Xext_FOUND)
  Message(STATUS "Found all necessary X11 features.")
  Set(COMPLETE_X11_FOUND TRUE)
Else()
  Set(COMPLETE_X11_FOUND FALSE)
EndIf()

#Check for OpenGL and GLU installation

find_package(OpenGL)

If(OPENGL_FOUND AND OPENGL_GLU_FOUND)
  Message(STATUS "Found all necessary OpenGL features.")
  Set(COMPLETE_OPENGL_FOUND TRUE)
Else()
  Set(COMPLETE_OPENGL_FOUND FALSE)
EndIf()


#---Check for needed programs

Find_Program(WGET_FOUND NAMES wget) 
Find_Program(CURL_FOUND NAMES curl)
If(WGET_FOUND OR CURL_FOUND)
  Set(DOWNLOADER_FOUND TRUE)
EndIf()

Find_Program(MAKE_FOUND NAMES make) 

Find_Program(BZIP2_FOUND NAMES bzip2) 
Find_Program(GZIP_FOUND NAMES gzip) 
Find_Program(UNZIP_FOUND NAMES unzip) 
Find_Program(TAR_FOUND NAMES tar)     

If(TAR_FOUND AND UNZIP_FOUND AND GZIP_FOUND AND BZIP2_FOUND)
  Set(UNPACKER_FOUND TRUE)  
Endif()

Find_Program(SVN_FOUND NAMES svn) 
Find_Program(GIT_FOUND NAMES git) 

Find_Program(PATCH_FOUND NAMES patch) 

If(DOWNLOADER_FOUND AND SVN_FOUND AND GIT_FOUND AND PATCH_FOUND AND MAKE_FOUND
   AND UNPACKER_FOUND AND COMPLETE_X11_FOUND AND COMPLETE_OPENGL_FOUND
   AND ALL_COMPILER_FOUND)
  Message(STATUS "Found all necessary programs in PATH.")
Else()
  If(NOT CMAKE_CXX_COMPILER)
    Message(STATUS "Could not find a C++ compiler. Was checking for ENV{CXX}. Either choose a differnt one or install it.")
  EndIf()
  If(NOT CMAKE_C_COMPILER)
    Message(STATUS "Could not find a C compiler. Was checking for ENV{CXX}. Either choose a differnt one or install it.")
  EndIf()
  If(NOT CMAKE_Fortran_COMPILER)
    Message(STATUS "Could not find any Fortran compiler. Please set the correct PATH or install one.")
  EndIf()
  If(NOT X11_FOUND)
    Message(STATUS "X11_INCLUDE_DIR: ${X11_INCLUDE_DIR}")
    Message(STATUS "X11_LIBRARIES: ${X11_LIBRARIES}")
    Message(STATUS "libX11 and X11 headers must be installed.")
  EndIf()
  If(NOT X11_Xpm_FOUND)
    Message(STATUS "X11_Xpm_INCLUDE_PATH: ${X11_Xpm_INCLUDE_PATH}")
    Message(STATUS "X11_Xpm_LIB: ${X11_Xpm_LIB}")
    Message(STATUS "libXpm and Xpm headers must be installed.")
  EndIf()
  If(NOT X11_Xft_FOUND)
    Message(STATUS "X11_Xft_INCLUDE_PATH: ${X11_Xft_INCLUDE_PATH}")
    Message(STATUS "X11_Xft_LIB: ${X11_Xft_LIB}")
    Message(STATUS "libXft and Xft headers must be installed.")
  EndIf()
  If(NOT X11_Xext_FOUND)
    Message(STATUS "X11_Xext_INCLUDE_PATH: ${X11_Xext_INCLUDE_PATH}")
    Message(STATUS "X11_Xext_LIB: ${X11_Xext_LIB}")
    Message(STATUS "libXext and Xext headers must be installed.")
  EndIf()
  If(NOT OPENGL_FOUND) 
    Message(STATUS "OpenGL must be installed ")
  EndIf()
  If(NOT OPENGL_GLU_FOUND)
    Message(STATUS "Mesa GLU must be installed ")
  EndIf()
  If(NOT DOWNLOADER_FOUND)
    Message(STATUS "Neither wget nor curl found in PATH. You need to install one of them")
  EndIf()
  If(NOT MAKE_FOUND)
    Message(STATUS "make is not found in PATH. You need to install it")
  EndIf()
  If(NOT BZIP2_FOUND)
    Message(STATUS "bzip2 is not found in PATH. You need to install it")
  EndIf()
  If(NOT GZIP_FOUND)
    Message(STATUS "gzip is not found in PATH. You need to install it")
  EndIf()
  If(NOT UNZIP_FOUND)
    Message(STATUS "unzip is not found in PATH. You need to install it")
  EndIf()
  If(NOT TAR_FOUND)  
    Message(STATUS "tar is not found in PATH. You need to install it")  
  EndIf()
  If(NOT SVN_FOUND)
    Message(STATUS "svn is not found in PATH. You need to install it")
  EndIf()
  If(NOT GIT_FOUND)
    Message(STATUS "git is not found in PATH. You need to install it")
  EndIf()
  If(NOT PATCH_FOUND)
    Message(STATUS "patch is not found in PATH. You need to install it")
  EndIf()
  Message(FATAL_ERROR "Please install the needed software.")
EndIf()

Include(CheckCXXCompilerFlag)

#---Check for cxx11
CHECK_CXX_COMPILER_FLAG("-std=c++11" HAS_CXX11)
If(HAS_CXX11)
  Message(STATUS "Current compiler does suppport -std=c++11 option.")
Else()
  Message(STATUS "Current compiler does not suppport -std=c++11 option.")
EndIf()

#---Check for libc++
CHECK_CXX_COMPILER_FLAG("-std=c++11 -stdlib=libc++" HAS_LIBCXX)
If(HAS_LIBCXX)
  Message(STATUS "Current compiler does suppport -stdlib=libc++")
Else()
  Message(STATUS "Current compiler does not suppport -stdlib=libc++")
EndIf()

Configure_File($ENV{SIMPATH}/test/configure.in $ENV{SIMPATH}/test/configure @ONLY)

#---Create the file with version info
set(CMAKE_MODULE_PATH "$ENV{SIMPATH}/test")
include(GenerateVersionInfo)
